#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_STUDENTS 20000
#define NUM_SUBJECTS 5
#define MAX_M 30

typedef struct {
    int id;
    int score;
} Pair;

int studentScores[MAX_STUDENTS+1][NUM_SUBJECTS];
int uniWeights[MAX_M+1][NUM_SUBJECTS];
int assignedUni[MAX_STUDENTS+1];
int remaining[MAX_STUDENTS];
int remainingCount = 0;

// qsort 비교 함수
int cmp_desc(const void *a, const void *b) {
    Pair *pa = (Pair*)a;
    Pair *pb = (Pair*)b;
    if (pb->score != pa->score) return pb->score - pa->score;
    return pa->id - pb->id;
}

void init(int N, int M, int mWeights[][NUM_SUBJECTS]) {
    for(int i=1;i<=M;i++)
        for(int j=0;j<NUM_SUBJECTS;j++)
            uniWeights[i][j] = mWeights[i-1][j];

    for(int i=0;i<=MAX_STUDENTS;i++)
        assignedUni[i] = 0;
    remainingCount = 0;
}

void add(int mID, int mScores[NUM_SUBJECTS]) {
    for(int i=0;i<NUM_SUBJECTS;i++)
        studentScores[mID][i] = mScores[i];
    remaining[remainingCount++] = mID;
}

void erase(int mID) {
    for(int i=0;i<remainingCount;i++) {
        if(remaining[i]==mID){
            remaining[i] = remaining[--remainingCount];
            return;
        }
    }
}

int suggest(int N, int M) {
    int rCount = remainingCount;
    int rList[MAX_STUDENTS];
    for(int i=0;i<rCount;i++) rList[i]=remaining[i];

    for(int u=1; u<=M; u++) {
        if(rCount==0) break;

        Pair arr[MAX_STUDENTS];
        for(int i=0;i<rCount;i++){
            int sid = rList[i];
            int s = 0;
            for(int j=0;j<NUM_SUBJECTS;j++)
                s += studentScores[sid][j]*uniWeights[u][j];
            arr[i].id = sid;
            arr[i].score = s;
        }
        qsort(arr, rCount, sizeof(Pair), cmp_desc);

        int take = (N < rCount)? N:rCount;
        int newRCount = 0;
        for(int i=0;i<rCount;i++){
            int sid = arr[i].id;
            if(i<take) assignedUni[sid]=u;
            else rList[newRCount++] = sid;
        }
        rCount = newRCount;
    }
    return 0;
}
