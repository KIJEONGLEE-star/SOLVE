#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_STUDENTS 20000
#define NUM_SUBJECTS 5
#define MAX_M 30

typedef struct {
    int id;
    int score;
} Pair;

int studentScores[MAX_STUDENTS+1][NUM_SUBJECTS];
int uniWeights[MAX_M+1][NUM_SUBJECTS];
int assignedUniversity[MAX_STUDENTS+1];
int activeStudents[MAX_STUDENTS+1];
int activeCount = 0;
bool isActive[MAX_STUDENTS+1];
bool needsUpdate = true;
int Ncap = 0, Mcap = 0;

// ------------------ qsort 비교 ------------------
int cmp_desc(const void *a, const void *b) {
    Pair *pa = (Pair*)a;
    Pair *pb = (Pair*)b;
    if (pb->score != pa->score) return pb->score - pa->score;
    return pa->id - pb->id;
}

// ------------------ 초기화 ------------------
void init(int N, int M, int mWeights[][NUM_SUBJECTS]) {
    for(int i=1;i<=M;i++)
        for(int j=0;j<NUM_SUBJECTS;j++)
            uniWeights[i][j] = mWeights[i-1][j];

    for(int i=0;i<=MAX_STUDENTS;i++){
        assignedUniversity[i] = 0;
        isActive[i] = false;
    }
    activeCount = 0;
    needsUpdate = true;
    Ncap = N;
    Mcap = M;
}

// ------------------ 학생 추가 ------------------
void add(int mID, int mScores[NUM_SUBJECTS]) {
    for(int j=0;j<NUM_SUBJECTS;j++)
        studentScores[mID][j] = mScores[j];
    if(!isActive[mID]){
        activeStudents[activeCount++] = mID;
        isActive[mID] = true;
    }
    needsUpdate = true;
}

// ------------------ 학생 삭제 ------------------
void erase(int mID) {
    if(isActive[mID]){
        isActive[mID] = false;
        needsUpdate = true;
    }
}

// ------------------ 시뮬레이션 ------------------
void simulate(void) {
    // 초기화
    for(int i=0;i<=MAX_STUDENTS;i++)
        assignedUniversity[i] = 0;

    // 남은 학생 리스트
    int rCount = 0;
    int rList[MAX_STUDENTS];
    for(int i=0;i<activeCount;i++){
        int sid = activeStudents[i];
        if(isActive[sid])
            rList[rCount++] = sid;
    }

    for(int u=1; u<=Mcap && rCount>0; u++){
        Pair arr[MAX_STUDENTS];
        for(int i=0;i<rCount;i++){
            int sid = rList[i];
            int s = 0;
            for(int j=0;j<NUM_SUBJECTS;j++)
                s += studentScores[sid][j]*uniWeights[u][j];
            arr[i].id = sid;
            arr[i].score = s;
        }
        qsort(arr, rCount, sizeof(Pair), cmp_desc);

        int take = (Ncap<rCount)? Ncap:rCount;
        int newCount = 0;
        for(int i=0;i<rCount;i++){
            int sid = arr[i].id;
            if(i<take) assignedUniversity[sid] = u;
            else rList[newCount++] = sid;
        }
        rCount = newCount;
    }

    needsUpdate = false;
}

// ------------------ 추천 대학 ------------------
int suggest(int mID){
    if(needsUpdate) simulate();
    return assignedUniversity[mID]?assignedUniversity[mID]:-1;
}
